// this is the deprecated/commented out code for discussion, cleaned up version will go directly to main, DO NOT PUSH THIS INTO MAIN

// dbml file that covers our db schema
// syntax reference here:
// https://dbml.dbdiagram.io/docs/

// added an email column here, compaitble with my acc
// creation form. also put unique contraints!
// when an account is created, it will default to users
// users are promoted to admin manually
Table users {
  userid serial [primary key]
  name varchar(30)
  role varchar(15) [default: 'user']
  username varchar(15) [unique, not null]
  email varchar(255) [unique, not null] 
  password varchar(512) [not null] // using 512 because Werkzeug's generate_password_hash can exceed 128
}

// Keep this schema and manually put in each of the county's information just in case the API does not work
Table county {
  CountyID int [primary key] // This will be based on the file, florida.txt
  Population integer // Keep this good!
  Name varchar(15) // Good, Keep!
  Number_Sheltered integer // We could get a sample number or use actually numbers
  Budget integer // using this for approval of funds; in real software there would probably be an overall budget but this prototype is more functional with individual county budgets
}

// This will be for the rescource requests, so specifically whenever city managers give an estimated
// cost to the state officials 
Table resource_req {
  ReportID serial [primary key]
  IncidentID [foreign key]
  County varchar(15) [foreign key??]
  // i'm commenting these lines out because i think these would be better in the incident table/they violate NF
    // AmountOfDamage float // Number of mileage that the propertie has damaged
    // TypeOfDamage text // Whether it was water, fire, etc.
    // PropertyType text // This is the type of property that was impacted, residential, business, etc.
  // these are commented out because they seem mostly superfluous in light of the resources you're allowed to request
    // EstimatedCost int // Estimated dollars amount of damage
    // VolunteersNeeded bool // If you need additional volunteers
    // DonationsNeeded bool // If donations are needed
  Helicopter int
  Gasoline int
  Diesel int
  Sandbags int
  Medical_Responders int
  Police_Responders int
  Fire_Responders int
  FundsApproved int // this should just be an int, if it's yes then it's fully approved, if it's no then it's 0, if it's not the full amount it's just the amount approved
  // commenting this out for reasons listed above NewFunds int // If funds have to be revised
}


// Just a bit of tweaks, turn this into incident reports
// Who can see this: community member can see the EventID, County, Address, Status, Submitted_At, and Description
// Same with city managers and state officials, except they both can change the status
// Maybe need more data types
Table incident_rep {
  EventID serial [primary key] // Will be generated after submission
  County varchar(15) [foreign key]?? // Will be from user input, maybe user tolower or something to keep it consistent
  Address TEXT(100) // Will be from user input
  Status varchar(15) // Generated after submission
  Submitted_At timestamp // Generated after submission
  Description TEXT(1000) // Will be from user input
}

Ref:  resources.County > county.Name
Ref: incident_rep.County > county.Name
Ref: resource_req.ReportID > incident_rep.EventID
